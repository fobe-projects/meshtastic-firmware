name: Test MinIO Artifact Upload & Download

on:
  workflow_dispatch:

env:
  FOBE_S3_ARTIFACT_BUCKET: fobe-gars-artifact
  FOBE_S3_ARTIFACT_HOST: ${{ secrets.FOBE_GARS_S3_ENDPOINT_HOST }}
  FOBE_S3_ARTIFACT_PORT: ${{ secrets.FOBE_GARS_S3_ENDPOINT_PORT }}
  FOBE_S3_ARTIFACT_ACCESS_KEY: ${{ secrets.FOBE_GARS_S3_ACCESS_KEY }}
  FOBE_S3_ARTIFACT_SECRET_KEY: ${{ secrets.FOBE_GARS_S3_SECRET_KEY }}
  RUNS_ON_S3_BUCKET_CACHE: fobe-gars-cache
  RUNS_ON_AWS_REGION: cn-sounth-fobe-1
  AWS_ACCESS_KEY_ID: ${{ secrets.FOBE_GARS_S3_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.FOBE_GARS_S3_SECRET_KEY }}
  AWS_ENDPOINT_URL: "http://${{ secrets.FOBE_GARS_S3_ENDPOINT_HOST }}:${{ secrets.FOBE_GARS_S3_ENDPOINT_PORT }}"
  RUNS_ON_S3_FORCE_PATH_STYLE: "true"

jobs:
  test-artifacts:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare test files
        shell: bash
        run: |
          mkdir -p testdir/subdir
          echo "file1" > testdir/file1.txt
          echo "file2" > testdir/file2.txt
          echo "hidden" > testdir/.hiddenfile
          echo "subfile" > testdir/subdir/subfile.txt
          echo "single" > singlefile.txt
          echo "overwrite" > overwrite.txt
          echo "overwrite-new" > overwrite-new.txt

      # 1. 上传单一文件
      - name: Upload single file
        uses: ./.github/actions/upload-artifact
        with:
          name: single-file
          path: singlefile.txt

      # 2. 上传目录（不包含隐藏文件）
      - name: Upload directory (no hidden)
        uses: ./.github/actions/upload-artifact
        with:
          name: dir-no-hidden
          path: testdir
          include-hidden-files: "false"

      # 3. 上传目录（包含隐藏文件）
      - name: Upload directory (with hidden)
        uses: ./.github/actions/upload-artifact
        with:
          name: dir-with-hidden
          path: testdir
          include-hidden-files: "true"

      # 4. 上传通配符（*.txt）
      - name: Upload wildcard
        uses: ./.github/actions/upload-artifact
        with:
          name: wildcard
          path: "*.txt"

      # 5. 上传重名文件（不覆盖，预期失败）
      - name: Upload overwrite (should fail)
        continue-on-error: true
        uses: ./.github/actions/upload-artifact
        with:
          name: overwrite-test
          path: overwrite.txt
          overwrite: "false"

      # 6. 上传重名文件（覆盖）
      - name: Upload overwrite (should succeed)
        uses: ./.github/actions/upload-artifact
        with:
          name: overwrite-test
          path: overwrite-new.txt
          overwrite: "true"

      # 7. 下载单一文件
      - name: Download single file
        uses: ./.github/actions/download-artifact
        with:
          name: single-file
          path: download/single

      # 8. 下载目录（不合并，多个 artifact）
      - name: Download all artifacts (merge-multiple=false)
        uses: ./.github/actions/download-artifact
        with:
          pattern: "dir-.*"
          path: download/dirs
          merge-multiple: "false"

      # 9. 下载目录（合并到同一目录）
      - name: Download all artifacts (merge-multiple=true)
        uses: ./.github/actions/download-artifact
        with:
          pattern: "dir-.*"
          path: download/dirs-merged
          merge-multiple: "true"

      # 10. 下载通配符上传的 artifact
      - name: Download wildcard artifact
        uses: ./.github/actions/download-artifact
        with:
          name: wildcard
          path: download/wildcard

      # 11. 下载重名覆盖的 artifact
      - name: Download overwrite artifact
        uses: ./.github/actions/download-artifact
        with:
          name: overwrite-test
          path: download/overwrite

      # 12. 下载所有 artifact（pattern 匹配所有）
      - name: Download all artifacts (pattern=*)
        uses: ./.github/actions/download-artifact
        with:
          pattern: ".*"
          path: download/all
          merge-multiple: "false"

      - name: List downloaded files
        shell: bash
        run: |
          echo "==== download/single ===="
          ls -al download/single || true
          echo "==== download/dirs ===="
          ls -alR download/dirs || true
          echo "==== download/dirs-merged ===="
          ls -al download/dirs-merged || true
          echo "==== download/wildcard ===="
          ls -al download/wildcard || true
          echo "==== download/overwrite ===="
          ls -al download/overwrite || true
          echo "==== download/all ===="
          ls -alR download/all || true
