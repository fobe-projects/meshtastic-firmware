name: Build

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      platform:
        required: true
        type: string
      pio_env:
        required: true
        type: string

permissions: read-all

env:
  PIP_TRUSTED_HOST: ${{ secrets.FOBE_PIP_TRUSTED_HOST }}
  PIP_INDEX_URL: ${{ secrets.FOBE_PIP_INDEX_URL }}
  ZSTD_NBTHREADS: 56
  RUNS_ON_S3_BUCKET_CACHE: fobe-gars-cache
  RUNS_ON_AWS_REGION: cn-sounth-fobe-1
  AWS_ACCESS_KEY_ID: ${{ secrets.FOBE_GARS_S3_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.FOBE_GARS_S3_SECRET_KEY }}
  AWS_ENDPOINT_URL: "http://${{ secrets.FOBE_GARS_S3_ENDPOINT_HOST }}:${{ secrets.FOBE_GARS_S3_ENDPOINT_PORT }}"
  RUNS_ON_S3_FORCE_PATH_STYLE: "true"

jobs:
  pio-build:
    name: build-${{ inputs.platform }}
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}

      - name: Set OTA firmware source and target
        if: startsWith(inputs.platform, 'esp32')
        id: ota_dir
        env:
          PIO_PLATFORM: ${{ inputs.platform }}
        run: |
          if [ "$PIO_PLATFORM" = "esp32s3" ]; then
            echo "src=firmware-s3.bin" >> $GITHUB_OUTPUT
            echo "tgt=release/bleota-s3.bin" >> $GITHUB_OUTPUT
          elif [ "$PIO_PLATFORM" = "esp32c3" ] || [ "$PIO_PLATFORM" = "esp32c6" ]; then
            echo "src=firmware-c3.bin" >> $GITHUB_OUTPUT
            echo "tgt=release/bleota-c3.bin" >> $GITHUB_OUTPUT
          elif [ "$PIO_PLATFORM" = "esp32" ]; then
            echo "src=firmware.bin" >> $GITHUB_OUTPUT
            echo "tgt=release/bleota.bin" >> $GITHUB_OUTPUT
          fi

      - name: Setup Python
        uses: ./.github/actions/setup-python

      - name: Build ${{ inputs.platform }}
        id: build
        shell: bash
        env:
          MT_ENV: ${{ inputs.pio_env }}
          MT_PLATFORM: ${{ inputs.platform }}
          MT_TARGET: build
          MT_OTA_FIRMWARE_SOURCE: ${{ steps.ota_dir.outputs.src || '' }}
          MT_OTA_FIRMWARE_TARGET: ${{ steps.ota_dir.outputs.tgt || '' }}
          PLATFORMIO_BUILD_DIR: /workspace/.pio/build
        run: |
          MT_ENV=${{ inputs.pio_env }}
          MT_PLATFORM=${{ inputs.platform }}
          MT_OTA_FIRMWARE_SOURCE=${{ steps.ota_dir.outputs.src || '' }}
          MT_OTA_FIRMWARE_TARGET=${{ steps.ota_dir.outputs.tgt || '' }}

          docker run --rm \
          --env GITHUB_ACTIONS \
          --env XDG_CACHE_HOME \
          --env MT_ENV \
          --env MT_PLATFORM \
          --env MT_TARGET \
          --env MT_OTA_FIRMWARE_SOURCE \
          --env MT_OTA_FIRMWARE_TARGET \
          --env PLATFORMIO_BUILD_DIR \
          -v $GITHUB_WORKSPACE:/workspace \
          ghcr.mirror.dc.fobestudio.com/meshtastic/gh-action-firmware:master-${{ inputs.platform }}

          sudo chmod -R u+w ~/runner/_work
          sudo chown -R $(id -un):$(id -gn) ~/runner/_work

      - name: Store binaries as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ inputs.platform }}-${{ inputs.pio_env }}-${{ inputs.version }}.zip
          overwrite: true
          path: |
            release/*.bin
            release/*.elf
            release/*.uf2
            release/*.hex
            release/*-ota.zip
