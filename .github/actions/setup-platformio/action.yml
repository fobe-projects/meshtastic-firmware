name: Setup PlatformIO with S3 cache
description: Install and restore PlatformIO dependencies using S3 cache

inputs:
  platform:
    description: Platform to build for
    required: true
  check-only:
    description: Only check cache status without downloading cache or installing dependencies
    required: false
    default: "false"
  read-only:
    description: Only restore cache if it exists, do not install dependencies if cache miss
    required: false
    default: "false"

outputs:
  cache-hit:
    description: Whether the cache was hit
    value: ${{ steps.cache.outputs.cache-hit }}

runs:
  using: composite
  steps:
    - name: Cleanup PlatformIO environment
      if: inputs.check-only != 'true'
      shell: bash
      run: |
        rm -rf ~/.platformio
        rm -rf .pio

    - name: Get current date
      id: date
      shell: bash
      run: echo "current_date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

    - name: Cache PlatformIO dependencies
      id: cache
      uses: runs-on/cache@v4
      with:
        path: |
          ~/.platformio
          .pio/libdeps
        key: |
          setup-platformio-${{ runner.os }}-${{ runner.arch }}-${{ inputs.platform }}-${{ steps.date.outputs.current_date }}
        restore-keys: |
          setup-platformio-${{ runner.os }}-${{ runner.arch }}-${{ inputs.platform }}-
        lookup-only: ${{ inputs.check-only == 'true' }}

    - name: Output cache status
      shell: bash
      run: |
        echo "Cache hit: ${{ steps.cache.outputs.cache-hit }}"
        if [ "${{ inputs.check-only }}" == "true" ]; then
          echo "check-only mode enabled, skipping remaining steps"
          exit 0
        fi

    - name: Check cache requirement for read-only mode
      if: inputs.read-only == 'true' && steps.cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "Error: read-only mode enabled but cache was not found"
        echo "Cache hit: ${{ steps.cache.outputs.cache-hit }}"
        exit 1

    - name: Upgrade Python tools
      if: inputs.check-only != 'true'
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install -U --no-build-isolation --no-cache-dir "setuptools<72"
        pip install -U platformio adafruit-nrfutil --no-build-isolation
        pip install -U poetry --no-build-isolation
        pip install -U meshtastic --pre --no-build-isolation

    - name: Install PlatformIO dependencies
      if: inputs.check-only != 'true' && inputs.read-only != 'true'
      shell: bash
      run: |
        pio upgrade
        TARGETS=$(./bin/generate_ci_matrix.py ${{ inputs.platform }} extra)
        echo "$TARGETS" | jq -r '.[]' | while read -r env; do
            echo "Gathering environment: $env"
            # Retry up to 3 times on failure
            for attempt in {1..3}; do
              echo "Attempt $attempt for environment: $env"
              if pio pkg install --environment "$env"; then
                break
              elif [ $attempt -eq 3 ]; then
                echo "Failed to install packages for $env after 3 attempts"
                exit 1
              else
                echo "Attempt $attempt failed, retrying..."
                sleep 5
              fi
            done
            for attempt in {1..3}; do
              echo "Attempt $attempt for tools installation: $env"
              if pio pkg install --environment "$env" --no-save \
                --tool platformio/tool-cppcheck \
                --tool platformio/tool-mklittlefs; then
                break
              elif [ $attempt -eq 3 ]; then
                echo "Failed to install tools for $env after 3 attempts"
                exit 1
              else
                echo "Attempt $attempt failed, retrying..."
                sleep 5
              fi
            done
            jdupes --quiet -r -L ~/.platformio || echo "Warning: jdupes failed for ~/.platformio directory"
            jdupes --quiet -r -L .pio || echo "Warning: jdupes failed for .pio directory"
        done
        rm -rf .pio/libdeps/template
        jdupes --quiet -r -L ~/.platformio || echo "Warning: jdupes failed for ~/.platformio directory"
        jdupes --quiet -r -L .pio || echo "Warning: jdupes failed for .pio directory"
        echo "All packages loaded successfully."
