name: Download Artifact Action
description: Download artifacts from MinIO

inputs:
  name:
    description: Name of the artifact to download. If unspecified, all artifacts for the run are downloaded.
    required: false
  path:
    description: Destination path. Supports basic tilde expansion. Defaults to $GITHUB_WORKSPACE
    required: false
  pattern:
    description: A glob pattern matching the artifacts that should be downloaded. Ignored if name is specified.
    required: false
  merge-multiple:
    description: |
      When multiple artifacts are matched, this changes the behavior of the destination directories.
      If true, the downloaded artifacts will be in the same directory specified by path.
      If false, the downloaded artifacts will be extracted into individual named directories within the specified path.
    required: false
    default: "false"

outputs:
  download-path:
    description: Path of artifact download

runs:
  using: composite
  steps:
    - uses: ./.github/actions/setup-minio

    - name: Set download path
      id: setpath
      shell: bash
      run: |
        if [ -z "${{ inputs.path }}" ]; then
          echo "download_path=$GITHUB_WORKSPACE" >> $GITHUB_OUTPUT
        else
          eval expanded_path="${{ inputs.path }}"
          echo "download_path=$expanded_path" >> $GITHUB_OUTPUT
        fi

    - name: Download artifact(s) from MinIO
      shell: bash
      run: |
        export MC_HOST_artifact="http://$FOBE_S3_ARTIFACT_ACCESS_KEY:$FOBE_S3_ARTIFACT_SECRET_KEY@$FOBE_S3_ARTIFACT_HOST:$FOBE_S3_ARTIFACT_PORT"

        OWNER="${{ github.repository_owner }}"
        REPO="${{ github.event.repository.name }}"
        RUN_ID="${{ github.run_id }}"
        BUCKET="$FOBE_S3_ARTIFACT_BUCKET"
        DEST="${{ steps.setpath.outputs.download_path }}"

        mkdir -p "$DEST"

        if [ -n "${{ inputs.name }}" ]; then
          ARTIFACTS=("${{ inputs.name }}")
        else
          ARTIFACT_PATH="artifact/$BUCKET/artifact/$OWNER/$REPO/$RUN_ID/"
          if [ -n "${{ inputs.pattern }}" ]; then
            echo "使用 pattern: ${{ inputs.pattern }}"
            echo "mc ls \"$ARTIFACT_PATH\" | awk '{print \$NF}' | grep -E \"${{ inputs.pattern }}\""
            ARTIFACTS=($(mc ls "$ARTIFACT_PATH" | awk '{print $NF}' | grep -E "${{ inputs.pattern }}"))
          else
            echo "未指定 pattern，列出所有 artifact"
            echo "mc ls \"$ARTIFACT_PATH\" | awk '{print \$NF}'"
            ARTIFACTS=($(mc ls "$ARTIFACT_PATH" | awk '{print $NF}'))
          fi
        fi

        echo "匹配到的 ARTIFACTS: ${ARTIFACTS[@]}"

        if [ ${#ARTIFACTS[@]} -eq 0 ]; then
          echo "::error::No artifacts found to download"
          exit 1
        fi

        if [[ "${{ inputs.merge-multiple }}" == "true" || ${#ARTIFACTS[@]} -eq 1 ]]; then
          for ART in "${ARTIFACTS[@]}"; do
            echo "target: artifact/$BUCKET/artifact/$OWNER/$REPO/$RUN_ID/$ART.zip"
            mc cp "artifact/$BUCKET/artifact/$OWNER/$REPO/$RUN_ID/$ART.zip" "$DEST/$ART.zip"
            unzip -o "$DEST/$ART.zip" -d "$DEST"
            rm "$DEST/$ART.zip"
          done
        else
          for ART in "${ARTIFACTS[@]}"; do
            mkdir -p "$DEST/$ART"
            echo "target: artifact/$BUCKET/artifact/$OWNER/$REPO/$RUN_ID/$ART.zip"
            mc cp "artifact/$BUCKET/artifact/$OWNER/$REPO/$RUN_ID/$ART.zip" "$DEST/$ART/$ART.zip"
            unzip -o "$DEST/$ART/$ART.zip" -d "$DEST/$ART"
            rm "$DEST/$ART/$ART.zip"
          done
        fi

        echo "Artifacts downloaded to $DEST"
        echo "download-path=$DEST" >> $GITHUB_OUTPUT

    - name: Set output
      shell: bash
      run: |
        echo "download-path=${{ steps.setpath.outputs.download_path }}" >> $GITHUB_OUTPUT
