name: Upload Artifact Action
description: Upload artifacts to MinIO

inputs:
  name:
    description: Artifact name
    default: artifact
  path:
    description: A file, directory or wildcard pattern that describes what to upload
    required: true
  if-no-files-found:
    description: >
      The desired behavior if no files are found using the provided path.

      Available Options:
        warn: Output a warning but do not fail the action
        error: Fail the action with an error message
        ignore: Do not output any warnings or errors, the action does not fail
    default: warn
  retention-days:
    description: >
      Duration after which artifact will expire in days. 0 means using default retention.

      Minimum 1 day.
      Maximum 90 days unless changed from the repository settings page.
  compression-level:
    description: >
      The level of compression for Zlib to be applied to the artifact archive.
      The value can range from 0 to 9:
      - 0: No compression
      - 1: Best speed
      - 6: Default compression (same as GNU Gzip)
      - 9: Best compression
      Higher levels will result in better compression, but will take longer to complete.
      For large files that are not easily compressed, a value of 0 is recommended for significantly faster uploads.
    default: "6"
  overwrite:
    description: >
      If true, an artifact with a matching name will be deleted before a new one is uploaded.
      If false, the action will fail if an artifact for the given name already exists.
      Does not fail if the artifact does not exist.
    default: "false"
  include-hidden-files:
    description: >
      If true, hidden files will be included in the artifact.
      If false, hidden files will be excluded from the artifact.
    default: "false"

runs:
  using: composite
  steps:
    - name: Collect files
      id: collect
      shell: bash
      run: |
        shopt -s globstar nullglob
        FILES=(${{ inputs.path }})
        if [ ${#FILES[@]} -eq 0 ]; then
          case "${{ inputs.if-no-files-found }}" in
            warn) echo "::warning::No files found for pattern ${{ inputs.path }}" ;;
            error) echo "::error::No files found for pattern ${{ inputs.path }}" ; exit 1 ;;
            ignore) echo "No files found, ignoring" ;;
          esac
          echo "files_found=false" >> $GITHUB_OUTPUT
        else
          printf "%s\n" "${FILES[@]}" > filelist.txt
          echo "files_found=true" >> $GITHUB_OUTPUT
        fi
    - name: Create zip
      if: steps.collect.outputs.files_found == 'true'
      shell: bash
      run: |
        shopt -s globstar nullglob
        FILE_LIST=()
        while IFS= read -r line; do
          for f in $line; do
            FILE_LIST+=("$f")
            if [[ "${{ inputs.include-hidden-files }}" == "true" ]] && [[ -d $f ]]; then
              FILE_LIST+=("$f"/.*)
            fi
          done
        done <<< "${{ inputs.path }}"
        if [[ "${{ inputs.include-hidden-files }}" == "true" ]]; then
          zip -r -${{ inputs.compression-level }} artifact.zip "${FILE_LIST[@]}"
        else
          zip -r -${{ inputs.compression-level }} artifact.zip "${FILE_LIST[@]}" -x ".*" -x "*/.*"
        fi
    - uses: ./.github/actions/setup-minio
    - name: Upload to MinIO
      shell: bash
      run: |
        set -euo pipefail
        export MC_HOST_artifact="http://$FOBE_S3_ARTIFACT_ACCESS_KEY:$FOBE_S3_ARTIFACT_SECRET_KEY@$FOBE_S3_ARTIFACT_HOST:$FOBE_S3_ARTIFACT_PORT"

        DEST="artifact/$FOBE_S3_ARTIFACT_BUCKET/artifact/${{ github.repository_owner }}/${{ github.event.repository.name }}/${{ github.run_id }}/${{ inputs.name }}.zip"

        if mc ls "$DEST" >/dev/null 2>&1; then
          if [[ "${{ inputs.overwrite }}" == "true" ]]; then
            echo "Artifact already exists. Overwriting..."
            mc rm -r --force "$DEST"
          else
            echo "::error::Artifact already exists at $DEST and overwrite=false"
            exit 1
          fi
        fi

        mc cp artifact.zip "$DEST"

        # Retention-days handling
        if [[ "${{ inputs.retention-days }}" != "0" ]]; then
          mc retention set governance ${{ inputs.retention-days }}d "$DEST"
        fi
