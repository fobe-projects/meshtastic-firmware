name: Upload Artifact Action
description: Upload artifacts to MinIO

inputs:
  name:
    description: Artifact name
    default: artifact
  path:
    description: A file, directory or wildcard pattern that describes what to upload
    required: true
  if-no-files-found:
    description: >
      The desired behavior if no files are found using the provided path.

      Available Options:
        warn: Output a warning but do not fail the action
        error: Fail the action with an error message
        ignore: Do not output any warnings or errors, the action does not fail
    default: warn
  compression-level:
    description: >
      The level of compression for Zlib to be applied to the artifact archive.
      The value can range from 0 to 9:
      - 0: No compression
      - 1: Best speed
      - 6: Default compression (same as GNU Gzip)
      - 9: Best compression
      Higher levels will result in better compression, but will take longer to complete.
      For large files that are not easily compressed, a value of 0 is recommended for significantly faster uploads.
    default: "6"
  overwrite:
    description: >
      If true, an artifact with a matching name will be deleted before a new one is uploaded.
      If false, the action will fail if an artifact for the given name already exists.
      Does not fail if the artifact does not exist.
    default: "false"
  include-hidden-files:
    description: >
      If true, hidden files will be included in the artifact.
      If false, hidden files will be excluded from the artifact.
    default: "false"

runs:
  using: composite
  steps:
    - name: Collect files
      id: collect
      shell: bash
      run: |
        shopt -s globstar nullglob
        FILES=(${{ inputs.path }})
        if [ ${#FILES[@]} -eq 0 ]; then
          case "${{ inputs.if-no-files-found }}" in
            warn) echo "::warning::No files found for pattern ${{ inputs.path }}" ;;
            error) echo "::error::No files found for pattern ${{ inputs.path }}" ; exit 1 ;;
            ignore) echo "No files found, ignoring" ;;
          esac
          echo "files_found=false" >> $GITHUB_OUTPUT
        else
          printf "%s\n" "${FILES[@]}" > filelist.txt
          echo "files_found=true" >> $GITHUB_OUTPUT
        fi
    - uses: ./.github/actions/setup-minio
    - name: Create zip
      if: steps.collect.outputs.files_found == 'true'
      shell: bash
      run: |
        shopt -s globstar nullglob dotglob
        FILE_LIST=()
        HAS_DIR=false
        HAS_FILE=false
        add_files() {
          local dir="$1"
          for f in "$dir"/* "$dir"/.*; do
            base="$(basename "$f")"
            if [[ "$base" == "." || "$base" == ".." ]]; then
              continue
            fi
            if [[ -d "$f" ]]; then
              if [[ "${{ inputs.include-hidden-files }}" == "true" ]]; then
                add_files "$f"
              fi
            else
              FILE_LIST+=("$f")
            fi
          done
        }
        eval "PATHS=(${{ inputs.path }})"
        for match in "${PATHS[@]}"; do
          if [[ -d "$match" ]]; then
            HAS_DIR=true
            FILE_LIST+=("$match")
          elif [[ -e "$match" ]]; then
            HAS_FILE=true
            FILE_LIST+=("$match")
          fi
        done
        if [ ${#FILE_LIST[@]} -eq 0 ]; then
          echo "No files found for path(s): ${{ inputs.path }}"
          exit 0
        fi

        mkdir -p "$RUNNER_TEMP/${{ github.repository_owner }}/${{ github.event.repository.name }}/${{ github.run_id }}/artifact"
        DEST_LOCAL="$RUNNER_TEMP/${{ github.repository_owner }}/${{ github.event.repository.name }}/${{ github.run_id }}/artifact/${{ inputs.name }}.zip"
        # If any directory is present, keep directory structure for all; else, flatten
        if [ "$HAS_DIR" = true ]; then
          zip -r -${{ inputs.compression-level }} "$DEST_LOCAL" "${FILE_LIST[@]}"
        else
          zip -j -r -${{ inputs.compression-level }} "$DEST_LOCAL" "${FILE_LIST[@]}"
        fi
        echo "Artifact created locally: $DEST_LOCAL"

    - name: Upload to MinIO
      shell: bash
      run: |
        export MC_HOST_artifact="http://$FOBE_S3_ARTIFACT_ACCESS_KEY:$FOBE_S3_ARTIFACT_SECRET_KEY@$FOBE_S3_ARTIFACT_HOST:$FOBE_S3_ARTIFACT_PORT"
        DEST_LOCAL="$RUNNER_TEMP/${{ github.repository_owner }}/${{ github.event.repository.name }}/${{ github.run_id }}/artifact/${{ inputs.name }}.zip"
        DEST="artifact/$FOBE_S3_ARTIFACT_BUCKET/artifact/${{ github.repository_owner }}/${{ github.event.repository.name }}/${{ github.run_id }}/${{ inputs.name }}"
        if mc ls "${DEST}" | grep -q "${{ inputs.name }}.zip"; then
          if [[ "${{ inputs.overwrite }}" == "true" ]]; then
            mc rm -r --force "${DEST}"
          else
            echo "::error::Artifact already exists at ${DEST} and overwrite=false"
            exit 1
          fi
        fi
        mc cp "$DEST_LOCAL" "$DEST"
        rm -rf "$DEST_LOCAL"
        rm -rf "$DEST_LOCAL"
